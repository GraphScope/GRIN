syntax = "proto3";

package gie;
option java_package = "com.alibaba.graphscope.proto.schema";

import "common.proto";

message GraphTopologyPartitionStrategy {
    message AllReplicate {
        // replicate all vertices and edges
        message AllReplicateVertex {};
        message AllReplicateEdge {};
    }

    message VertexCut {
        // partition edges first, then place vertices automatically
    }

    message EdgeCut {
        // partition vertices first using MAP_TO_ONE strategy,
        // then place edges with certain placement strategy
        message VertexPartitionStrategy {
            enum Kind {
                VPS_UNDEFINED = 0;
                VPS_RANGE_SPLIT = 1;
                VPS_ROUND_ROBIN = 2;
                VPS_HASH = 3;
            }
            message Key {
                message OID {}
                oneof item {
                    OID oid = 1;
                    string property_name = 2;
                }
            }
            Kind kind = 1;
            repeated Key keys = 2;
        }
    
        enum EdgePlacementStrategy {
            EPS_UNDEFINED = 0;
            EPS_FOLLOW_SRC = 1;
            EPS_FOLLOW_DST = 2;
            EPS_FOLLOW_BOTH = 3;
        }

        VertexPartitionStrategy vertex_partition = 1;
        EdgePlacementStrategy edge_placement = 2;
    }

    message Hybrid {
        // partition vertices first using different strategies per type,
        // then place edges with different placement strategies per type
        message VertexTypePartition {
            message HybridVertexPartitionStrategy {
                oneof item {
                    AllReplicate.AllReplicateVertex all_replicate = 1;
                    EdgeCut.VertexPartitionStrategy vertex_partition = 2;
                }
            }
            VertexTypeIdentifier vertex_type_identifier = 1;
            HybridVertexPartitionStrategy vertex_partition = 2;
        }

        message EdgeTypePlacement {
            EdgeTypeIdentifier edge_type_identifier = 1;
            EdgeCut.EdgePlacementStrategy edge_placement = 2;
        }

        repeated VertexTypePartition vertex_type_partition = 1;
        repeated EdgeTypePlacement edge_type_placement = 2;
    }

    oneof item {
        AllReplicate replicate = 1;
        EdgeCut edge_cut = 2;
        VertexCut vertex_cut = 3;
        Hybrid hybrid = 4;
    }
}

message GraphPropertyPlacementStrategy {
    enum PropertyPlacementStrategy {
        PPS_UNDEFINED = 0;
        PPS_ON_MASTER = 1;
        PPS_ON_MASTER_N_MIRROR = 2;
    }

    // for AllReplicate/EdgeCut/VertexCut
    message DefaultPropertyPlacement {
        PropertyPlacementStrategy vertex_property_partition = 1;
        PropertyPlacementStrategy edge_property_partition = 2;
    }

    // for Hybrid
    message HybridPropertyPlacement {
        message VertexTypePropertyPlacement {
            VertexTypeIdentifier vertex_type_identifier = 1;
            PropertyPlacementStrategy property_partition = 2;
        }

        message EdgeTypePropertyPlacement {
            EdgeTypeIdentifier edge_type_identifier = 1;
            PropertyPlacementStrategy property_partition = 2;
        }

        repeated VertexTypePropertyPlacement vertex_type_property_partition = 1;
        repeated EdgeTypePropertyPlacement edge_type_property_partition = 2;
    }

    oneof item {
        DefaultPropertyPlacement default_property_partition = 1;
        HybridPropertyPlacement hybrid_property_partition = 2;
    }
}

message GraphPartitionStrategy {
    GraphTopologyPartitionStrategy topology_partition = 1;
    GraphPropertyPlacementStrategy property_partition = 2;
}
