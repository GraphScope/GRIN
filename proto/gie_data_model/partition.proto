syntax = "proto3";

package gie;
option java_package = "com.alibaba.graphscope.proto.schema";

import "common.proto";

message GraphTopologyPartitionStrategy {
    enum VertexPartitionStrategy {
        VPS_UNDEFINED = 0;
        VPS_ALL_REPLICATE = 1;
        VPS_MAP_TO_ONE = 2;
    }

    enum EdgePlacementStrategy {
        EPS_UNDEFINED = 0;
        EPS_FOLLOW_SRC = 1;
        EPS_FOLLOW_DST = 2;
        EPS_FOLLOW_BOTH = 3;
    }

    message AllReplicate {
        // replicate all vertices and edges
    }

    message VertexCut {
        // partition edges first, then place vertices automatically
    }

    message EdgeCut {
        // partition vertices first using MAP_TO_ONE strategy,
        // then place edges with certain placement strategy
        EdgePlacementStrategy edge_partition = 1;
    }

    message Hybrid {
        // partition vertices first using different strategies per type,
        // then place edges with different placement strategies per type
        message VertexTypePartition {
            VertexTypeIdentifier vertex_type_identifier = 1;
            VertexPartitionStrategy vertex_partition = 2;
        }

        message EdgeTypePlacment {
            EdgeTypeIdentifier edge_type_identifier = 1;
            EdgePlacementStrategy edge_placement = 2;
        }

        repeated VertexTypePartition vertex_type_partition = 1;
        repeated EdgeTypePlacment edge_type_placement = 2;
    }

    oneof item {
        AllReplicate replicate = 1;
        EdgeCut edge_cut = 2;
        VertexCut vertex_cut = 3;
        Hybrid hybrid = 4;
    }
}

message GraphPropertyPlacementStrategy {
    enum PropertyPlacementStrategy {
        PPS_UNDEFINED = 0;
        PPS_ON_MASTER = 1;
        PPS_ON_MASTER_N_MIRROR = 2;
    }

    message VertexOrEdgePropertyPlacement {
        PropertyPlacementStrategy vertex_property_partition = 1;
        PropertyPlacementStrategy edge_property_partition = 2;
    }

    message TypePropertyPlacement {
        message VertexTypePropertyPlacement {
            VertexTypeIdentifier vertex_type_identifier = 1;
            PropertyPlacementStrategy property_partition = 2;
        }

        message EdgeTypePropertyPlacement {
            EdgeTypeIdentifier edge_type_identifier = 1;
            PropertyPlacementStrategy property_partition = 2;
        }

        repeated VertexTypePropertyPlacement vertex_type_property_partition = 1;
        repeated EdgeTypePropertyPlacement edge_type_property_partition = 2;
    }

    oneof item {
        VertexOrEdgePropertyPlacement vertex_or_edge_property_partition = 1;
        TypePropertyPlacement type_property_partition = 2;
    }
}

message GraphPartitionStrategy {
    GraphTopologyPartitionStrategy topology_partition = 1;
    GraphPropertyPlacementStrategy property_partition = 2;
}
