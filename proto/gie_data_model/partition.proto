syntax = "proto3";

package gie;
option java_package = "com.alibaba.graphscope.proto.schema";

import "schema.proto";

message GraphTopologyPartitionStrategy {
    message AllReplicate {}

    message VertexCut {
        // partition edges first, then place vertices automatically
    }

    message EdgeCut {
        // partition vertices first using MAP_TO_ONE strategy,
        // then place edges with certain placement strategy
        message VertexPartitionStrategy {
            message PartitionKey {
                repeated string property_keys = 1;
            }
            PartitionKey partition_key = 1;
        }
    
        enum EdgePlacementStrategy {
            EPS_UNDEFINED = 0;
            EPS_FOLLOW_SRC = 1;
            EPS_FOLLOW_DST = 2;
            EPS_FOLLOW_BOTH = 3;
        }

        VertexPartitionStrategy vertex_partition = 1;
        EdgePlacementStrategy edge_placement = 2;
    }

    message AdvancedEdgeCut {
        // Categorize the vertex types into two groups based on partition strategy: one is 'all_replicate', and the other is 'edge_cut'.
        repeated uint32 all_replicate_vertex_type_ids = 1;
        repeated uint32 edge_cut_vertex_type_ids = 2;

        EdgeCut.VertexPartitionStrategy edge_cut_vertex_partition = 3;

        // The placement strategy of the edge is related to the partition strategy of the two endpoints, which follows these rules:
        // 1. If the src is 'all_replicate' and the dst is 'edge_cut', then the placement of the edge is 'EPS_FOLLOW_DST'.
        // 2. If the src is 'edge_cut' and the dst is 'all_replicate', then the placement of the edge is 'EPS_FOLLOW_SRC'.
        // 3. If both the src and dst are 'edge_cut', then the placement of the edge is 'EPS_FOLLOW_BOTH'.
        // 4. If both the src and dst are 'all_replicate', then the placement of the edge can be any of 'EPS_FOLLOW_SRC/EPS_FOLLOW_DST/EPS_FOLLOW_BOTH', but we tentatively set it to 'EPS_FOLLOW_SRC'.
    }

    oneof item {
        AllReplicate replicate = 1;
        EdgeCut edge_cut = 2;
        VertexCut vertex_cut = 3;
        AdvancedEdgeCut advanced_edge_cut = 4;
    }
}

message GraphPropertyPlacementStrategy {
    // This strategy assumes that properties are always distributed along with the topology of the vertices/edges. 
    // Other strategies, i.e., properties are not distributed along with the topology, are not currently being considered.
    enum PropertyPlacementStrategy {
        PPS_UNDEFINED = 0;
        // Properties exist only in one of partitions (i.e., the master node in GRIN) where the vertex/edge topology resides.
        // i.e., In EdgeCut, the vertex properties exist only once in the partition where the vertex topology resides, we consider this case as 'PPS_ON_MASTER'.
        PPS_ON_MASTER = 1;
        // Properties exist in each partition where the vertex/edge topology resides.
        // i.e., In EdgeCut, the edge properties exist in each partition where the edge topology resides, we consider this case as 'PPS_ON_MASTER_N_MIRROR'.
        PPS_ON_MASTER_N_MIRROR = 2;
    }

    message AllReplicatePropertyPlacement {
        PropertyPlacementStrategy all_replicate_vertex_property_placement_strategy = 1;
        PropertyPlacementStrategy all_replicate_edge_property_placement_strategy = 2;
    }

    // Combine the EdgeCut and AdvancedEdgeCut partition strategies.
    message EdgeCutPropertyPlacement {
        PropertyPlacementStrategy all_replicate_vertex_property_placement_strategy = 1;
        PropertyPlacementStrategy edge_cut_vertex_property_placement_strategy = 2;
        PropertyPlacementStrategy edge_cut_edge_property_placement_strategy = 3;
    }
    
    message VertexCutPropertyPlacement {
        // property placement in VertexCut is not considered currently.
    }

    oneof item {
        AllReplicatePropertyPlacement all_replicate_property_placement = 1;
        EdgeCutPropertyPlacement edge_cut_property_placement = 2;
        VertexCutPropertyPlacement vertex_cut_property_placement = 3;
    }
}

message GraphPartitionStrategy {
    GraphTopologyPartitionStrategy topology_partition = 1;
    GraphPropertyPlacementStrategy property_placement = 2;
}
