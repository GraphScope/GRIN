syntax = "proto3";

package grin;
option java_package = "com.alibaba.graphscope.proto.grin_schema";

import "schema.proto";

message PartitionStrategy {
    /**
    * Given a partition P that divides the original graph G into p partitions,
    * let V_i and E_i represent the sets of vertices and edges, respectively, 
    * in partition i (where i = 1, 2, ..., p in P).
    * Correspondingly, let V_i^m and E_i^m represent the master sets of vertices 
    * and edges, respectively, in partition i (where i = 1, 2, ..., p in P).
    *
    * P is considered valid if it satisfies the following conditions:
    * 1. V_i^m is a subset of V_i.
    * 2. E_i^m is a subset of E_i.
    * 3. The sets V_i^m are disjoint and their union is V.
    * 4. The sets E_i^m are disjoint and their union is E.
    * Consequently, we refer to the vertices in V_i^m as master vertices in partition i, 
    * and the vertices in V_i - V_i^m as mirror vertices.
    * Similarly, we have master edges and mirror edges.
    *
    * Moreover, a partition strategy is defined as the process through which 
    * V_i^m, E_i^m, V_i, and E_i are computed.
    * A partition P is said to follow a particular partition strategy
    * if the partition can be computed using the defined process.
    * This means that a graph partition P may follow multiple partition strategies.
    */

    message EdgeCut {
        /**
        * The edge cut partition strategy begins by assigning each vertex, 
        * denoted as v, in the set V to a single partition. 
        * This initial assignment results in the set V_i^m.
        * Next, for each partition i, we place the edges of E(V_i^m) into partition i.
        * Afterwards, we apply the cut edge placement strategies to place the cut edges, 
        * which are edges with endpoints in different partitions, into their respective partitions. 
        * This step generates the set E_i. 
        * It is important to note that if the strategy does not involve replicating the cut edges, 
        * then E_i^m will be equal to E_i.
        * However, if the cut edges are being replicated, then each replicated cut edge 
        * is assigned a master partition to build the set E_i^m.
        * Finally, by letting V_i equal the union of V(E_i) and V_i^m,
        * we obtain the final partition.
        */

        enum DirectedEdgePlacementStrategy {
            // Each edge is placed to the partition of its source vertex
            DEPS_TO_SRC = 0;
            // Each edge is placed to the partition of its destination vertex
            DEPS_TO_DST = 1;
        }

        message DirectedEdgePlacementStrategies {
            repeated DirectedEdgePlacementStrategy cut_edge_placement_strategies = 1;
        }

        enum UndirectedEdgePlacementStrategy {
            // Each edge is placed to the lower partition of its endpoints
            UEPS_TO_LOWER = 0;
            // Each edge is placed to the higher partition of its endpoints
            UEPS_TO_HIGHER = 1;
        }

        message UndirectedEdgePlacementStrategies {
            repeated UndirectedEdgePlacementStrategy cut_edge_placement_strategies = 1;
        }

        oneof item {
            DirectedEdgePlacementStrategies directed_cut_edge_placement_strategies = 1;
            UndirectedEdgePlacementStrategies undirected_cut_edge_placement_strategies = 2;
        }
    }

    message VertexCut {
        /**
        * The vertex cut partition strategy starts by assigning each edge e in E 
        * to a single partition, resulting in E_i^m. 
        * We then have E_i = E_i^m and V_i = V(E_i). 
        * Next, for each zero-degree vertex z, we assign a master partition to that vertex.
        * Finally, for each vertex v that appears in multiple V_i, we assign a master 
        * partition to that vertex to create V_i^m, completing the final partition.
        */
    }

    oneof item {
        EdgeCut edge_cut = 1;
        VertexCut vertex_cut = 2;
    }
}

message UniversalVertices {
    /**
    * Universal vertices, denoted as U, are replicated to all partitions. 
    * Additionally, the edges between them, denoted as E(U), 
    * are also replicated to all partitions, and we call them universal edges.
    * The process begins by selecting U before the partition. This involves 
    * removing U from V and removing E(U) and CE(U, V) from E, where CE(U, V) 
    * represents the cross edges between U and V.
    * Next, the remaining vertices and edges are partitioned. 
    * Following this, each cross edge e in CE(U, V) is placed based on the cross 
    * edge placement strategy, and E_i is updated accordingly. 
    * If replication is involved during the placement process, a master partition 
    * is assigned to each cross edge, and E_i^m is updated. 
    * Finally, the resulting partition is obtained.
    */
    enum EdgePlacementStrategy {
        EPS_TO_MASTER = 0;
        EPS_TO_MIRROR = 1;
        EPS_TO_UNIVERSAL = 2;
    }
    
    repeated uint32 universal_vertex_type_ids = 1;
    repeated EdgePlacementStrategy cross_edge_placement_strategies = 2;
}

enum SparseIndexStrategy {
    SIS_NO_INDEX = 0;
    // The Compressed Sparse Row Storage
    SIS_CSR = 1;
    // The Compressed Sparse Column Storage
    SIS_CSC = 2;
    // The Coordinate Storage
    SIS_COO = 3;
}

enum PropertyPlacementStrategy {
    // Property is placed on master entities
    PPS_ON_MASTER = 0;
    // Property is placed on mirror entities
    PPS_ON_MIRROR = 1;
    // Property is placed on universal entities
    PPS_ON_UNIVERSAL = 2;

    // Property is split on master and other entities
    PPS_SPLIT_MASTER = 3;
    // Property is split on mirror and other entities
    PPS_SPLIT_MIRROR = 4;
    // Property is split on universal entities
    PPS_SPLIT_UNIVERSAL = 5;
}

message Partition {
    repeated PartitionStrategy partition_strategies = 1;
    UniversalVertices universal_vertices = 2;

    repeated PropertyPlacementStrategy vertex_property_placement_strategies = 3;
    repeated PropertyPlacementStrategy edge_property_placement_strategies = 4;

    repeated SparseIndexStrategy master_vertices_sparse_index_strategies = 5;
    repeated SparseIndexStrategy mirror_vertices_sparse_index_strategies = 6;
    repeated SparseIndexStrategy universal_vertices_sparse_index_strategies = 7;
}
