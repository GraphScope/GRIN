syntax = "proto3";

enum ListRetrieval {
    LR_NA = 0;
    LR_ARRAY_LIKE = 1;
    LR_ITERATOR = 2;
}

message TopologyTrait {
    bool grin_assume_has_directed_graph = 1;
    bool grin_assume_has_undirected_graph = 2;
    bool grin_assume_has_multi_edge_graph = 3;
    bool grin_with_vertex_original_id = 4;
    bool grin_with_vertex_data = 5;
    bool grin_with_edge_data = 6;
    repeated ListRetrieval vertex_list_retrievals = 7;
    repeated ListRetrieval edge_list_retrievals = 8;
    repeated ListRetrieval adjacent_list_retrievals = 9;
}

enum GraphPartitionStrategy {
    GPS_NA = 0;
    GPS_ALL_REPLICATE = 1;
    GPS_EDGE_CUT = 2;
    GPS_VERTEX_CUT = 3;
    GPS_HYBRID_CUT = 4;
}

enum PropertyDataPartitionStrategy {
    PPS_NA = 0;
    PPS_MASTER_ONLY = 1;
    PPS_REPLICATE_MASTER_MIRROR = 2;
    PPS_SPLIT_MASTER_MIRROR = 3;
}

message MirrorPartitionListTrait {
    bool grin_trait_master_vertex_mirror_partition_list = 1;
    bool grin_trait_mirror_vertex_mirror_partition_list = 2;
    bool grin_trait_master_edge_mirror_partition_list = 3;
    bool grin_trait_mirror_edge_mirror_partition_list = 4;
}


message PartitionTrait {
    GraphPartitionStrategy graph_partition_strategy = 1;
    
    bool grin_triat_natural_id_for_partition = 2;
    bool grin_enable_vertex_ref = 3;
    bool grin_enable_edge_ref = 4;
    
    PropertyDataPartitionStrategy vertex_data = 5;
    PropertyDataPartitionStrategy edge_data = 6;

    MirrorPartitionListTrait mirror_partition_list_trait = 7;

    bool grin_trait_select_master_for_vertex_list = 8;
    bool grin_trait_select_partition_for_vertex_list = 9;
    bool grin_trait_select_master_for_edge_list = 10;
    bool grin_trait_select_partition_for_edge_list = 11;
    bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
    bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
}

message VertexPropertyTrait {
    bool grin_with_vertex_property = 1;
    bool grin_with_vertex_property_name = 2;
    bool grin_with_vertex_type_name = 3;

    bool grin_enable_vertex_property_table = 4;
    bool grin_enable_vertex_primary_keys = 5;

    bool grin_trait_natural_id_for_vertex_type = 6;
    bool grin_trait_natural_id_for_vertex_property = 7;

    bool grin_assume_by_type_vertex_original_id = 8;
}

message EdgePropertyTrait {
    bool grin_with_edge_property = 1;
    bool grin_with_edge_property_name = 2;
    bool grin_with_edge_type_name = 3;

    bool grin_enable_edge_property_table = 4;
    bool grin_enable_edge_primary_keys = 5;

    bool grin_trait_natural_id_for_edge_type = 6;
    bool grin_trait_natural_id_for_edge_property = 7;
}

message PropertyTrait {
    bool grin_enable_row = 1;
    VertexPropertyTrait vertex_property_trait = 2;
    EdgePropertyTrait edge_property_trait = 3;

    PropertyDataPartitionStrategy vertex_property = 4;
    PropertyDataPartitionStrategy edge_property = 5;

    bool grin_assume_column_store_for_vertex_property = 6;
    bool grin_assume_column_store_for_edge_property = 7;

    bool grin_trait_select_type_for_vertex_list = 8;
    bool grin_trait_select_type_for_edge_list = 9;
    bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
    bool grin_trait_select_edge_type_for_adjacent_list = 11;
    bool grin_trait_specific_vev_relation = 12;
}

message IndexTrait {
    bool grin_with_vertex_label = 1;
    bool grin_with_edge_label = 2;

    bool grin_assume_all_vertex_list_sorted = 3;
}

message PredicateTrait {
    
}

message StorageTrait {
    oneof specific_trait {
        TopologyTrait topology_trait = 1;
        PartitionTrait partition_trait = 2;
        PropertyTrait property_trait = 3;
        IndexTrait index_trait = 4;
        PredicateTrait predicate_trait = 5;
    }
}


message Storage {
    optional string name = 1;
    optional int32 version = 2;
    optional int32 grin_version = 3;

    optional ListRetrieval vertex_list_retrieval = 4;
    optional ListRetrieval edge_list_retrieval = 5;
    optional ListRetrieval adjacent_list_retrieval = 6;
    
    repeated StorageTrait traits = 7;
}

message Statistics {
    int32 vertex_count = 1;
    int32 edge_count = 2;
    int32 partition_count = 3;
    int32 vertex_type_count = 4;
    int32 edge_type_count = 5;
}

message Graph {
    string uri = 1;
    string grin_version = 2;
    repeated StorageTrait traits = 3;
    Statistics statistics = 4;
}
